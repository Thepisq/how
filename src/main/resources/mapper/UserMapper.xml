<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.liushao.guangli.mapper.UserMapper">

    <resultMap id="BaseResultMap" type="com.liushao.guangli.entity.User">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="username" jdbcType="VARCHAR" property="username" />
        <result column="password" jdbcType="VARCHAR" property="password" />
        <result column="tel" jdbcType="VARCHAR" property="tel" />
        <result column="registerDate" jdbcType="TIMESTAMP" property="registerDate" />
    </resultMap>

    <resultMap id="ArticleCountResultMap" type="com.liushao.guangli.entity.User">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="username" jdbcType="VARCHAR" property="username" />
        <result column="password" jdbcType="VARCHAR" property="password" />
        <result column="tel" jdbcType="VARCHAR" property="tel" />
        <result column="registerDate" jdbcType="TIMESTAMP" property="registerDate" />
        <result column="articleCount" jdbcType="INTEGER" property="articleCount" />
    </resultMap>

    <sql id="Base_Column_List">
    id, username, password, tel, registerDate
    </sql>

    <insert id="insert" parameterType="com.liushao.guangli.entity.User" >
    insert into user (id, username, password,
      tel, registerDate)
    values (#{id}, #{username}, #{password},
      #{tel},now())
  </insert>
    <insert id="insertSelective" parameterType="com.liushao.guangli.entity.User" >
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="username != null" >
                username,
            </if>
            <if test="password != null" >
                password,
            </if>
            <if test="tel != null" >
                tel,
            </if>
            <if test="registerDate != null" >
                registerDate,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id},
            </if>
            <if test="username != null" >
                #{username},
            </if>
            <if test="password != null" >
                #{password},
            </if>
            <if test="tel != null" >
                #{tel},
            </if>
            <if test="registerDate != null" >
                now(),
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.liushao.guangli.entity.User" >
        update user
        <set >
            <if test="username != null" >
                username = #{username},
            </if>
            <if test="password != null" >
                password = #{password},
            </if>
            <if test="tel != null" >
                tel = #{tel},
            </if>
            <if test="registerDate != null" >
                registerDate = #{registerDate},
            </if>
        </set>
        where id = #{id}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.liushao.guangli.entity.User" >
    update user
    set username = #{username},
      password = #{password},
      tel = #{tel},
      registerDate = #{registerDate},
    where id = #{id}
    </update>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where id = #{id}
    </delete>

    <delete id="deleteBatch" parameterType="List">
        <!-- delete from emp where empno in(7789,7790) -->
        <!-- forEach : 用来循环 collection : 用来指定循环的数据的类型 可以填的值有：array,list,map
        item: 循环中为每个循环的数据指定一个别名 index : 循环中循环的下标 open : 开始 close : 结束
        separator : 数组中元素之间的分隔符 -->
        delete from user where id in
        <foreach collection="list" item="item" index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from user
        where id = #{id}
    </select>

    <select id="countByUsername" parameterType="string" resultType="java.lang.Integer">
        select
        count(id) from user
        where username = #{username}
    </select>

    <!-- 查询所有 -->
    <select id="findAll" resultMap="ArticleCountResultMap">
        select user.*,
          (
            select count(article.userid)  from article where user.id = article.userid
          ) as articleCount
        from user
    </select>

    <!-- 根据ID查询 -->
    <select id="findById" resultMap="BaseResultMap" parameterType="integer">
        SELECT * FROM user WHERE id = #{id}
    </select>

    <!-- 创建 -->
    <insert id="create" parameterType="com.liushao.guangli.entity.User">
        INSERT INTO user(username, password) VALUES (#{username}, #{password})
    </insert>

    <!-- 删除 -->
    <delete id="delete" parameterType="integer">
        DELETE FROM user WHERE id = #{id}
    </delete>

    <!-- 更新 -->
    <update id="update" parameterType="com.liushao.guangli.entity.User">
        UPDATE user SET WHERE 1=1
        <if test="username != null">
            username = #{username},
        </if>
        <if test="password != null">
            password = #{password}
        </if>
        WHERE id = #{id}
    </update>

    <!-- 根据用户名查询 -->
    <select id="findByName" parameterType="String" resultMap="BaseResultMap">
        SELECT * FROM user WHERE username = #{username}
    </select>
</mapper>